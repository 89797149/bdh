<?phpnamespace Merchantapi\Model;use think\Image;/** * ============================================================================ * NiaoCMS商城 * 官网地址:http://www.niaocms.com * 联系QQ:1692136178 * ============================================================================ * 总仓进销存服务类 */class JxcModel extends BaseModel {    /*     *生成单据编号(copy进销存保持统一,type的值自己摸索或自定义)     * @param string $type PS:('CGDD'=>'采购单','DBD'=>调拨单,"QTRKD"=>其他入库单)     * */    public function get_number($type){        $number=$type.date('Ymdhis',time());        return $number;    }    /**     * 创建进销存职员账号     * @param $shopInfo     */    public function createJxcUserAccount($shop){        $apiRet['apiCode'] = -1;        $apiRet['apiInfo'] = '操作失败';        $apiRet['apiState'] = 'error';        $apiRet['apiData'] = array();        $isMainWarehouse = I('isMainWarehouse',0,'intval');//是否开启总仓  0：否 1：是        $shopInfo = M('shops')->where(array('shopId'=>$shop['shopId'],'shopFlag'=>1))->find();        if (empty($shopInfo)) {            $apiRet['apiInfo'] = '商户不存在';            return $apiRet;        }        M('shop_configs')->where(array('shopId'=>$shopInfo['shopId']))->save(["isMainWarehouse"=>$isMainWarehouse]);        if (empty($isMainWarehouse)) {            $apiRet['apiCode'] = 0;            $apiRet['apiInfo'] = '操作成功';            $apiRet['apiState'] = 'success';            return $apiRet;        }        $shopConfig = M('shop_configs')->where(["shopId"=>$shopInfo["shopId"]])->find();        if($shopConfig['isMainWarehouse'] == 1){            //原有基础新增,防止重复创建账号,就不改动下面的代码了            $is_userInfo = M('user','is_')->where(["id"=>$shopConfig['mainWarehouseUserId']])->find();            if($is_userInfo){                $return_data = array(                    'isMainWarehouse'   =>  $isMainWarehouse,                    'mainWarehouseUsername' =>  $shopConfig['mainWarehouseUsername'],                    'mainWarehousePwd'  =>  $shopConfig['mainWarehousePwd'],                    'mainWarehouseUserId'   =>  $shopConfig['mainWarehouseUserId']                );                $apiRet['apiCode'] = 0;                $apiRet['apiInfo'] = '操作成功';                $apiRet['apiState'] = 'success';                $apiRet['apiData'] = $return_data;                return $apiRet;            }        }        $bankInfo = M('bank')->where(array('bankId'=>$shopInfo['bankId']))->find();        $merchant_data = array(            'name'  =>  $shopInfo['shopName'],            'py'    =>  '',            'number'    =>  $shopInfo['shopSn'],            'type'  =>  0,            'contacts'  =>  '',            'tel'   =>  '',            'add'   =>  '',            'tax'   =>  '',            'bank'  =>  $bankInfo['bankName'],            'account'   =>  $shopInfo['bankNo'],            'data'  =>  '',            'more'  =>  ''        );        $merchant_id = M('merchant','is_')->add($merchant_data);        if (!$merchant_id) {            $apiRet['apiInfo'] = '创建总仓商户失败';            return $apiRet;        }        $user = $shopInfo['shopName'].$shopInfo['shopId'];        //$pwd = 123456;        $pwd = randPassword(6,'NUMBER');        $user_data = array(            'user'  => $user,            'pwd'   =>  md5($pwd),            'merchant'  =>  $merchant_id,            'name'  =>  $shopInfo['shopName'],            'py'    =>  '',            'img'   =>  '',            'data'  =>  '',            'token' =>  $this->user_token(),            'type'  =>  0,            'more'  =>  ''        );        $user_id = M('user','is_')->add($user_data);        if (!$user_id) {            $apiRet['apiInfo'] = '创建总仓职员账号失败';            return $apiRet;        }        //为店铺自动分配一个仓库,仓库的编号和店铺的编号关联        $existHouse = M('warehouse','is_')->where(["number"=>$shopInfo['shopSn']])->find();        if(!$existHouse){            $userInfo = M('users')->where(['userId'=>$shopInfo['userId'],'userFlag'=>1])->field('userName,userPhone')->find();            $insertWarehouse['name'] = $shopInfo['shopName'];            $insertWarehouse['py'] = '';            $insertWarehouse['number'] = $shopInfo['shopSn'];            $insertWarehouse['contacts'] = $userInfo['userName'];            $insertWarehouse['tel'] = $userInfo['userPhone'];            $insertWarehouse['add'] = $shopInfo['shopAddress']; //仓库地址            $insertWarehouse['data'] = ''; //备注信息            $insertWarehouse['more'] = '';            M('warehouse','is_')->add($insertWarehouse);        }        $this->jxcLog('新增职员信息[ '.$user.' ]',$user_id,$merchant_id);        $return_data = array(            'isDistributionBasket'   =>  1,            'isMainWarehouse'   =>  $isMainWarehouse,            'mainWarehouseUsername' =>  $user,            'mainWarehousePwd'  =>  $pwd,            'mainWarehouseUserId'   =>  $user_id        );        M('shop_configs')->where(array('shopId'=>$shopInfo['shopId']))->save($return_data);        $apiRet['apiCode'] = 0;        $apiRet['apiInfo'] = '操作成功';        $apiRet['apiState'] = 'success';        $apiRet['apiData'] = $return_data;        return $apiRet;    }    /**     * 进销存日志     */    public function jxcLog($text,$user_id,$merchant_id){        $data = array(            'text'  =>  $text,            'user'  =>  $user_id,            'time'  =>  time(),            'merchant'  =>  $merchant_id        );        M('log','is_')->add($data);    }    //产生随机令牌    public function user_token (){        $token='';        $n='qwertyuioplkjhgfdsazxcvbnm+=-1234567890QWERTYUIOPASDFGHJKLZXCVBNM';        for ($i=0;$i<30;$i++){            $token.=$n[mt_rand(0,strlen($n)-1)];        }        return $token;    }    /**     * 采购单列表     * 新增/编辑入库任务时会用到     * @param $shop     */    public function getPurchaseOrderList($shop){        $where = array();        $where['op.type'] = 1;        $where['op.storage'] = 0;        $where['sc.shopId'] = $shop['shopId'];        $list = M('opurchaseclass as op','is_')            ->join('left join wst_shop_configs as sc on op.user = sc.mainWarehouseUserId')            ->field('op.*')            ->where($where)            ->order('time desc')            ->select();        return $list;    }    /**     * 用户入库任务列表     * @param $param     *///    public function getUserInWarehouseList($param){//        $where = array();//        $where['state'] = $param['state'];//        $where['iwFlag'] = 1;//        $iwm = M('in_warehouse');//        $ioom = M('opurchaseinfo','is_');//        $list = $iwm->where($where)->select();//        $iwid_arr = array();//        if (!empty($list)) {//            foreach ($list as $v) {//                $uids_arr = explode(',',$v['uids']);//                if (in_array($param['userId'],$uids_arr)) {//                    $iwid_arr[] = $v['iwid'];//                }//            }//        }//        $in_warehouse_list = array();//        if (!empty($iwid_arr)) {//            $where['iwid'] = array('in',$iwid_arr);//            $in_warehouse_list = $iwm//                ->where($where)//                ->order('createTime desc')//                ->limit(($param['page']-1)*$param['pageSize'],$param['pageSize'])//                ->select();//            if (!empty($in_warehouse_list)) {//                foreach ($in_warehouse_list as $k=>$v) {//                    //商品总数//                    $in_warehouse_list[$k]['in_warehouse_goods_total_num'] = $ioom->where(array('pid'=>array('in',$v['purchaseOrderIds'])))->sum('nums');////                    //已入库商品数//                    if ($param['state'] == 0) {//待入库//                        $in_warehouse_list[$k]['in_warehouse_goods_num'] = 0;//                    } else {//入库中、已完成//                        $in_warehouse_list[$k]['in_warehouse_goods_num'] = $ioom->where(array('pid'=>array('in',$v['purchaseOrderIds']),'storage'=>2))->sum('nums');//                    }//                }//            }//        }//        return $in_warehouse_list;//    }    /**     * 用户入库任务列表     * @param $param     *///    public function getUserInWarehouseList($param){//        //此接口是后改,原来的接口在上面注释的地方//        $warehouseTab = M('in_warehouse');//入库任务表//        $purInfoTab = M('jxc_purchase_order_info');//采购单明细表//        $allocationInfoTab = M('jxc_allocation_info');//调拨单明细表//        $where = [];//        $where['state'] = $param['state'];//        $where['iwFlag'] = 1;//        $list = $warehouseTab->where($where)->select();//        $iwid_arr = [];//        if (!empty($list)) {//            foreach ($list as $v) {//                $uids_arr = explode(',',$v['uids']);//                if (in_array($param['userId'],$uids_arr)) {//                    $iwid_arr[] = $v['iwid'];//                }//            }//        }//        $in_warehouse_list = [];//        if (!empty($iwid_arr)) {//            $where = [];//            $where['iwid'] = array('in',$iwid_arr);//            $in_warehouse_list = $warehouseTab//                ->where($where)//                ->order('createTime desc')//                ->limit(($param['page']-1)*$param['pageSize'],$param['pageSize'])//                ->select();//            if (!empty($in_warehouse_list)) {//                foreach ($in_warehouse_list as $k=>$v) {//                    //商品总数//                    if($v['dataType'] == 1){//                        //采购单//                        $in_warehouse_list[$k]['in_warehouse_goods_total_num'] = $purInfoTab->where(array('otpId'=>array('in',$v['purchaseOrderIds'])))->sum('totalNum');//                    }else{//                        //调拨单//                        $in_warehouse_list[$k]['in_warehouse_goods_total_num'] = $allocationInfoTab->where(array('allId'=>array('in',$v['purchaseOrderIds'])))->sum('totalNum');//                    }//                    //已入库商品数//                    if ($param['state'] == 0) {//待入库//                        $in_warehouse_list[$k]['in_warehouse_goods_num'] = 0;//                    } else {//入库中、已完成//                        if($v['dataType'] == 1){//                            $in_warehouse_list[$k]['in_warehouse_goods_num'] = $purInfoTab->where(array('otpId'=>array('in',$v['purchaseOrderIds'])))->sum('num');//                        }else{//                            $in_warehouse_list[$k]['in_warehouse_goods_num'] = $allocationInfoTab->where(array('allId'=>array('in',$v['purchaseOrderIds'])))->sum('num');//                        }//                    }//                }//            }//        }//        return $in_warehouse_list;//    }    /**     * 用戶入库任务列表     * *///    public function getUserInWarehouseList($param){//        //此接口是后改,原来的接口在上面注释的地方//        $warehouseTab = M('in_warehouse');//入库任务表//        $purInfoTab = M('jxc_purchase_order_info');//采购单明细表//        $allocationInfoTab = M('jxc_allocation_info');//调拨单明细表//        $where = [];//        $where['state'] = $param['state'];//        $where['iwFlag'] = 1;//        $list = $warehouseTab->where($where)->select();//        $iwid_arr = [];//        if (!empty($list)) {//            foreach ($list as $v) {//                $uids_arr = explode(',',$v['uids']);//                if (in_array($param['userId'],$uids_arr)) {//                    $iwid_arr[] = $v['iwid'];//                }//            }//        }//        $in_warehouse_list = [];//        if (!empty($iwid_arr)) {//            $where = [];//            $where['iwid'] = array('in',$iwid_arr);//            $in_warehouse_list = $warehouseTab//                ->where($where)//                ->order('createTime desc')//                ->limit(($param['page']-1)*$param['pageSize'],$param['pageSize'])//                ->select();//            if (!empty($in_warehouse_list)) {//                foreach ($in_warehouse_list as $k=>$v) {//                    //商品总数//                    if($v['dataType'] == 1){//                        //采购单//                        $in_warehouse_list[$k]['in_warehouse_goods_total_num'] = $purInfoTab->where(array('otpId'=>array('in',$v['purchaseOrderIds'])))->sum('totalNum');//                    }else{//                        //调拨单//                        $in_warehouse_list[$k]['in_warehouse_goods_total_num'] = $allocationInfoTab->where(array('allId'=>array('in',$v['purchaseOrderIds'])))->sum('totalNum');//                    }//                    //已入库商品数//                    if ($param['state'] == 0) {//待入库//                        $in_warehouse_list[$k]['in_warehouse_goods_num'] = 0;//                    } else {//入库中、已完成//                        if($v['dataType'] == 1){//                            $in_warehouse_list[$k]['in_warehouse_goods_num'] = $purInfoTab->where(array('otpId'=>array('in',$v['purchaseOrderIds'])))->sum('num');//                        }else{//                            $in_warehouse_list[$k]['in_warehouse_goods_num'] = $allocationInfoTab->where(array('allId'=>array('in',$v['purchaseOrderIds'])))->sum('num');//                        }//                    }//                }//            }//        }//        return $in_warehouse_list;//    }    /**     * 需求更改,已废弃     * PS:之前的接口在上面注释的地方     * 入库任务列表     * @param int $userId 用户id     * @param int $state 入库状态【0：待入库 1：入库中 2：已入库】     * @param int $page 页码     * @param int $pageSize 分页条数     * *///    public function getUserInWarehouseList($userId,$state,$page,$pageSize){//        //此接口是后改,原来的接口在上面注释的地方//        $warehouseTab = M('in_warehouse');//入库任务表//        $warehouseInfoTab = M('in_warehouse_info');//入库任务明细表//        $purInfoTab = M('jxc_purchase_order');//采购单主表//        $purInfoTab = M('jxc_purchase_order_info');//采购单明细表//        $allocationTab = M('jxc_allocation_bill');//调拨单主表//        $allInfoTab = M('jxc_allocation_bill_info');//调拨单明细表//        $where = [];//        $where['state'] = $state;//        $where['iwFlag'] = 1;//        $list = $warehouseTab//            ->where($where)//            ->select();//        if(empty($list)){//            return [];//        }//        $iwidArr = [];//        foreach ($list as $key=>$value){//            $uidArr = explode(',',$value['uids']);//            if(in_array($userId,$uidArr)){//                $iwidArr[] = $value['iwid'];//            }//        }//        unset($value);//        if(empty($iwidArr)){//            return [];//        }//        $where = [];//        $where['state'] = $state;//        $where['iwFlag'] = 1;//        $where['iwid'] = ['IN',$iwidArr];//        $res = $warehouseTab//            ->where($where)//            ->limit(($page - 1) * $pageSize, $pageSize)//            ->select();//        if(empty($res)){//            return [];//        }//        foreach ($res as $key=>$value){//            $wareInfos = $warehouseInfoTab->where(['iwid'=>$value['iwid']])->select();//            $res[$key]['totalNum'] = 0;//入库总数量//            $res[$key]['completeNum'] = 0;//已入库数量//            if($value['dataType'] == 1){//                //采购单//            }//            if($value['dataType'] == 2){//                //调拨单//                foreach ($wareInfos as $infokey=>$infoval){//                    $totalNum = $allInfoTab->where(['allId'=>$infoval['dataId']])->sum('totalNum');//                    dd($allInfoTab->getLastSql());//                    //等待修改//                }//            }////        }//        $purchaseOrderIds = '';//        dd($res);//        dd($purchaseOrderIds);//        return $list;//    }    /**     * 修改入库任务状态为入库中     * @param $iwid     */    public function changeInWarehouseState($iwid){        $apiRet['apiCode'] = -1;        $apiRet['apiInfo'] = '操作失败';        $apiRet['apiState'] = 'error';        $apiRet['apiData'] = array();        $iwm = M('in_warehouse');        //$where = array('iwid'=>$iwid,'iwFlag'=>1);        $where = [];        $where['iwid'] = $iwid;        $where['iwFlag'] = 1;        $in_warehouse_info = $iwm->where($where)->find();        if (empty($in_warehouse_info)) {            $apiRet['apiInfo'] = '入库任务不存在';            return $apiRet;        }        if($in_warehouse_info['dataType'] == 1){            //处理采购单数据            /*M('opurchaseclass','is_')->where(array('id'=>array('in',$in_warehouse_info['purchaseOrderIds'])))->save(array('storage'=>1));*/            $where = [];            $where['otpId'] = ['IN',$in_warehouse_info['purchaseOrderIds']];            M('jxc_purchase_order')->where($where)->save(['warehouse'=>1]);        }else{            //处理调拨单数据            /*M('allocationclass','is_')->where(array('id'=>array('in',$in_warehouse_info['purchaseOrderIds'])))->save(array('storage'=>1));*/            $where = [];            $where['allId'] = ['IN',$in_warehouse_info['purchaseOrderIds']];            M('jxc_allocation_order')->where($where)->save(['warehouse'=>1]);        }        if (in_array($in_warehouse_info['state'],array(1))) {            $apiRet['apiCode'] = 0;            $apiRet['apiInfo'] = '操作成功';            $apiRet['apiState'] = 'success';            return $apiRet;        }        $where = [];        $where['iwid'] = $iwid;        $result = $iwm->where($where)->save(array('state'=>1));        if ($result) {            $apiRet['apiCode'] = 0;            $apiRet['apiInfo'] = '操作成功';            $apiRet['apiState'] = 'success';        }        return $apiRet;    }    /**     * 入库详情     * 盘点端     * @param $param     *///    public function getUserInWarehouseDetail($param){//        $apiRet['apiCode'] = -1;//        $apiRet['apiInfo'] = '操作失败';//        $apiRet['apiState'] = 'error';//        $apiRet['apiData'] = array();////        $where = array();//        $where['iwid'] = $param['iwid'];//        $where['iwFlag'] = 1;//        $iwm = M('in_warehouse');//        $ioom = M('opurchaseinfo as oo','is_');//        $in_warehouse_info = $iwm->where($where)->find();//        if (empty($in_warehouse_info)) {//            $apiRet['apiInfo'] = '入库任务不存在';//            return $apiRet;//        }//        $owhere = array();//        $owhere['oo.pid'] = array('in',$in_warehouse_info['purchaseOrderIds']);//        $owhere['oo.storage'] = $param['storage'];////        /*$opurchaseinfo_list = $ioom->distinct(true)->field('oo.*,g.goodsImg,g.goodsThums,g.goodsName,g.goodsLocation,os.number')->join('left join wst_goods as g on oo.goodsSn = g.goodsSn')->join('left join is_opurchaseclass as os on oo.pid = os.id')->where($owhere)->order('id desc')->limit(($param['page']-1)*$param['pageSize'],$param['pageSize'])->select();*///        if($in_warehouse_info['dataType'] == 1){//            //采购单//            $opurchaseinfo_list = $ioom->field('oo.*,g.goodsImg,g.goodsThums,g.goodsName,g.goodsLocation,os.number')->join('left join wst_goods as g on oo.goodsSn = g.goodsSn')->join('left join is_opurchaseclass as os on oo.pid = os.id')->where($owhere)->group("id")->order('id desc')->limit(($param['page']-1)*$param['pageSize'],$param['pageSize'])->select();//        }else{//            //调拨单//            $opurchaseinfo_list = M("allocationinfo oo","is_")->field('oo.*,g.goodsImg,g.goodsThums,g.goodsName,g.goodsLocation,os.number')->join('left join wst_goods as g on oo.goodsSn = g.goodsSn')->join('left join is_allocationclass as os on oo.pid = os.id')->where($owhere)->group("id")->order('id desc')->limit(($param['page']-1)*$param['pageSize'],$param['pageSize'])->select();//        }//        if (!empty($opurchaseinfo_list)) {//            $location = M('location')->where(array('shopId'=>$param['shopId'],'parentId'=>array('GT',0)))->getField('lid,name');//            foreach ($opurchaseinfo_list as $k=>$v) {//                $opurchaseinfo_list[$k]['iwid'] = $in_warehouse_info['iwid'];//                $opurchaseinfo_list[$k]['nums'] = intval($v['nums']);//                $opurchaseinfo_list[$k]['beforestoragenum'] = intval($v['beforestoragenum']);//                $opurchaseinfo_list[$k]['afterwarehousingnum'] = intval($v['afterwarehousingnum']);//                //已完成beforestoragenum//                $numsYes = $opurchaseinfo_list[$k]['afterwarehousingnum'] - $opurchaseinfo_list[$k]['beforestoragenum'];//                $opurchaseinfo_list[$k]['numsYes'] = $numsYes;////                //未完成//                $numsNo = $opurchaseinfo_list[$k]['nums'] - $opurchaseinfo_list[$k]['numsYes'];//                $opurchaseinfo_list[$k]['numsNo'] = $numsNo;//                if (!empty($v['goodsLocation'])) {//                    $goodsLocation = $v['goodsLocation'];//                    $goodsLocation_arr = explode(',', $goodsLocation);//                    $location_new = '';//                    foreach ($goodsLocation_arr as $va){//                        $location_new .= $location[$va].",";//                    }//                    $opurchaseinfo_list[$k]['goodsLocationName'] = rtrim($location_new,',');//                }//            }//        }////        $apiRet['apiCode'] = 0;//        $apiRet['apiInfo'] = '操作成功';//        $apiRet['apiState'] = 'success';//        $apiRet['apiData'] = $opurchaseinfo_list;////        return $apiRet;//    }    public function getUserInWarehouseDetail($param)    {        //上面注释的getUserInWarehouseDetail方法为原有代码        //保持原有数据接口,只修改其内容即可        $apiRet['apiCode'] = -1;        $apiRet['apiInfo'] = '操作失败';        $apiRet['apiState'] = 'error';        $apiRet['apiData'] = [];        $where = [];        $where['iwid'] = $param['iwid'];        $where['iwFlag'] = 1;        $in_warehouse_info = M('in_warehouse')->where($where)->find();        if (empty($in_warehouse_info)) {            $apiRet['apiInfo'] = '入库任务不存在';            return $apiRet;        }        if ($in_warehouse_info['dataType'] == 1) {            //采购单            $where = [];            $where['info.otpId'] = ['in',$in_warehouse_info['purchaseOrderIds']];            $owhere['info.warehouse'] = $param['storage'];            //('oo.*,g.goodsImg,g.goodsThums,g.goodsName,g.goodsLocation,os.number')            $opurchaseinfo_list = M('jxc_purchase_order_info info')->join('left join wst_goods g on info.goodsId=g.goodsId')->join('left join wst_jxc_purchase_order pur on pur.otpId=info.otpId')->field('info.*,g.goodsImg,g.goodsThums,g.goodsName,g.goodsLocation,pur.number')->where($where)->group('info.infoId')->order("info.infoId desc")->limit(($param['page'] - 1) * $param['pageSize'], $param['pageSize'])->select();        } else {            //调拨单            /*$opurchaseinfo_list = M("allocationinfo oo", "is_")->field('oo.*,g.goodsImg,g.goodsThums,g.goodsName,g.goodsLocation,os.number')->join('left join wst_goods as g on oo.goodsSn = g.goodsSn')->join('left join is_allocationclass as os on oo.pid = os.id')->where($owhere)->group("id")->order('id desc')->limit(($param['page'] - 1) * $param['pageSize'], $param['pageSize'])->select();*/            $where = [];            $where['info.infoId'] = ['in',$in_warehouse_info['purchaseOrderIds']];            $owhere['info.warehouse'] = $param['storage'];            $opurchaseinfo_list = M('jxc_purchase_order_info info')->join('left join wst_goods g on info.goodsId=g.goodsId')->join('left join wst_jxc_purchase_order pur on pur.otpId=info.otpId')->where($where)->group('info.infoId')->order("info.infoId desc")->limit(($param['page'] - 1) * $param['pageSize'], $param['pageSize'])->select();        }        if (!empty($opurchaseinfo_list)) {            $location = M('location')->where(array('shopId' => $param['shopId'], 'parentId' => array('GT', 0)))->getField('lid,name');            foreach ($opurchaseinfo_list as $k => $v) {                $opurchaseinfo_list[$k]['iwid'] = $in_warehouse_info['iwid'];                $opurchaseinfo_list[$k]['nums'] = intval($v['nums']);                $opurchaseinfo_list[$k]['beforestoragenum'] = intval($v['beforestoragenum']);                $opurchaseinfo_list[$k]['afterwarehousingnum'] = intval($v['afterwarehousingnum']);                //已完成beforestoragenum                $numsYes = $opurchaseinfo_list[$k]['afterwarehousingnum'] - $opurchaseinfo_list[$k]['beforestoragenum'];                $opurchaseinfo_list[$k]['numsYes'] = $numsYes;                //未完成                $numsNo = $opurchaseinfo_list[$k]['nums'] - $opurchaseinfo_list[$k]['numsYes'];                $opurchaseinfo_list[$k]['numsNo'] = $numsNo;                if (!empty($v['goodsLocation'])) {                    $goodsLocation = $v['goodsLocation'];                    $goodsLocation_arr = explode(',', $goodsLocation);                    $location_new = '';                    foreach ($goodsLocation_arr as $va) {                        $location_new .= $location[$va] . ",";                    }                    $opurchaseinfo_list[$k]['goodsLocationName'] = rtrim($location_new, ',');                }            }        }        $apiRet['apiCode'] = 0;        $apiRet['apiInfo'] = '操作成功';        $apiRet['apiState'] = 'success';        $apiRet['apiData'] = $opurchaseinfo_list;        return $apiRet;    }    /**     * 修改采购单商品状态     * 盘点端     */    public function changeInWarehouseGoodsState($user,$id,$storage,$iwid){        $apiRet['apiCode'] = -1;        $apiRet['apiInfo'] = '操作失败';        $apiRet['apiState'] = 'error';        $apiRet['apiData'] = array();        $warehouseInfo = M("in_warehouse")->where(["iwid"=>$iwid,"iwFlag"=>1])->find();        if($warehouseInfo){            $where = array('id'=>$id);            $save_data = array('storage'=>$storage,'userId'=>$user['id'],'username'=>$user['username'],'inwarehousetime'=>time());            if($warehouseInfo['dataType'] == 1){                $ioom = M('opurchaseinfo','is_');                $opurchaseinfo = $ioom->where($where)->find();            }else{                $ioom = M('allocationinfo','is_');                $opurchaseinfo = $ioom->where($where)->find();            }            if (empty($opurchaseinfo)) {                $apiRet['apiInfo'] = '商品不存在';                return $apiRet;            }            if (empty($storage)) {                $apiRet['apiInfo'] = '操作异常';                return $apiRet;            } else if ($storage == 1) {                unset($save_data['inwarehousetime']);                if (in_array($opurchaseinfo['storage'],array(1))){                    $apiRet['apiCode'] = 1;                    $apiRet['apiInfo'] = '已有人在入库，请选择其它商品';                    $apiRet['apiState'] = 'success';                    return $apiRet;                }            } else if ($storage == 2) {                if (in_array($opurchaseinfo['storage'],array(2))){                    $apiRet['apiCode'] = 1;                    $apiRet['apiInfo'] = '有人已完成该商品的入库';                    $apiRet['apiState'] = 'success';                    return $apiRet;                }                $goods_info = M('goods')->where(array('goodsSn'=>$opurchaseinfo['goodsSn']))->find();                if (!empty($goods_info)) $ioom->where($where)->save(array('beforestoragenum'=>$goods_info['goodsStock'],'afterwarehousingnum'=>$goods_info['goodsStock']+$opurchaseinfo['nums']));                //原有基础修改,完成商品入库也要更改商品的库存                M('goods')->where(['goodsId'=>$goods_info['goodsId']])->save(['goodsStock'=>$goods_info['goodsStock']+$opurchaseinfo['nums']]);                //更新进销存系统商品的库存                //updateJXCGoodsStock($goods_info['goodsId'],$goods_info['goodsStock']+$opurchaseinfo['nums'],2);            }            $result = $ioom->where($where)->save($save_data);            if ($result) {                $apiRet['apiCode'] = 0;                $apiRet['apiInfo'] = '操作成功';                $apiRet['apiState'] = 'success';            }        }        return $apiRet;    }    /**     * 完成入库任务     * @param $shopId     * @param $iwid     */    public function completeInWarehouse($shopId,$iwid){        /*         * PS;根据现在遗留下来的代码分析,盘点入库,更改任务的状态没有和商品实际库存和商品入库状态挂钩,所以下面在更改入库任务状态的同时直接更改商品的入库状态         * */        $m = M('in_warehouse');        $where = array('iwid'=>$iwid,'shopId'=>$shopId,'iwFlag'=>1);        $inWarehouseInfo = $m->where($where)->find();        if (empty($inWarehouseInfo) || in_array($inWarehouseInfo['state'],array(0,2))) return false;        if($inWarehouseInfo['dataType'] == 1){            //采购单            $where = [];            $where['otpId'] = ['IN',$inWarehouseInfo['purchaseOrderIds']];            $res = M('jxc_purchase_order')->where($where)->save(['warehouse'=>2]);            if($res !== false){                $purchaseOrderIdArr = explode(',',$inWarehouseInfo['purchaseOrderIds']);                foreach ($purchaseOrderIdArr as $value){                    $where = [];                    $where['otpId'] = $value;                    $infoList = M('jxc_purchase_order_info')->where($where)->select();                    foreach ($infoList as $infoVal){                        $infoSave = [];                        $infoSave['warehouse'] = 2;                        $infoSave['num'] = $infoVal['totalNum'];                        M('jxc_purchase_order_info')->where(['infoId'=>$infoVal['infoId']])->save($infoSave);                    }                }            }        }else{            //调拨单            $where = [];            $where['allId'] = ['IN',$inWarehouseInfo['purchaseOrderIds']];            $saveData = [];            $saveData['examineStatus'] = 3;            $saveData['warehouse'] = 2;            $res = M('jxc_allocation_order')->where($where)->save($saveData);            if($res !== false){                $purchaseOrderIdArr = explode(',',$inWarehouseInfo['purchaseOrderIds']);                foreach ($purchaseOrderIdArr as $value){                    $where = [];                    $where['allId'] = $value;                    $infoList = M('jxc_allocation_info')->where($where)->select();                    foreach ($infoList as $infoVal){                        $infoSave = [];                        $infoSave['warehouse'] = 2;                        $infoSave['num'] = $infoVal['totalNum'];                        M('jxc_allocation_info')->where(['infoId'=>$infoVal['infoId']])->save($infoSave);                    }                }            }        }        return $m->where(['iwid'=>$inWarehouseInfo['iwid']])->save(array('state'=>2));    }    /*     * 本地同步云仓商品的商品相册     * */    public function synchroGoodsGallery($param){        $apiRet['apiCode'] = -1;        $apiRet['apiInfo'] = '操作失败';        $apiRet['apiState'] = 'error';        $shopId = $param['shopId'];        $houseInfo = $this->checkShopWareHouse($shopId);        if(empty($houseInfo['id'])){            return $houseInfo;        }        $goodsTab = M('goods');        $gallerTab = M('goods_gallerys');        $isGoodsTab = M('goods','is_');        $isGWhere['warehouse'] = $houseInfo['id'];        if($param['type'] == 1){            $goodsId = json_decode($param['goodsId']);            $goodsSnArr = [];            foreach ($goodsId as $val){                $goodsSnArr[] = M('goods')->where(['goodsId'=>$val,'shopId'=>$shopId])->getField('goodsSn');            }            $isGWhere['number'] = ['IN',$goodsSnArr];        }        $isGoodsList = $isGoodsTab->where($isGWhere)->field('number,imgs')->select();        if($isGoodsList){            foreach ($isGoodsList as $key=>$value){                $goodsInfo = $goodsTab->where(['goodsSn'=>$value['number'],'shopId'=>$shopId])->field('goodsId')->find();                if($goodsInfo){                    $gallery = json_decode($value['imgs']);                    if($gallery){                        foreach ($gallery as $val){                            //info: C('JXC_WEB')."/skin/upload/goods/img/5d8830310576b.jpeg"                            $imgUrl = C('JXC_WEB').$val;                            $imgUrlInfo = pathinfo($imgUrl);                            $savePath = "Upload/goods/".date("Y-m",time());                            $defaultImgName = time().'_'.$imgUrlInfo['filename'];                            $savePathImg = $savePath.'/'.$defaultImgName.'.'.$imgUrlInfo['extension'];                            if (!is_dir($savePath)) {                                mkdir($savePath, 0777, true);                            }                            import("ORG.Net.Http");                            \Org\Net\Http::curlDownload($imgUrl,$savePathImg);                            $imgClass = new \Think\Image();                            $imgClass->open($savePathImg);                            if(!empty($imgClass->width($savePathImg))){                                $thumbImg = $savePath.'/'.$defaultImgName.'_thumb'.'.'.$imgUrlInfo['extension'];                                $imgClass->thumb(300, 300)->save($thumbImg);                                $gallerTab->where(['goodsId'=>$goodsInfo['goodsId']])->delete();                                $insertGallery['goodsId'] = $goodsInfo['goodsId'];                                $insertGallery['shopId'] = $shopId;                                $insertGallery['goodsImg'] = $savePathImg;                                $insertGallery['goodsThumbs'] = $thumbImg;                                $gallerTab->add($insertGallery);                            }                        }                    }                }            }        }        $apiRet['apiCode'] = 0;        $apiRet['apiInfo'] = '操作成功';        $apiRet['apiState'] = 'success';        return $apiRet;    }    /*     * 验证云仓是否有和店铺关联的仓库     * @param int $shopId     * */    public function checkShopWareHouse($shopId){        $apiRet['apiCode'] = -1;        $apiRet['apiInfo'] = '操作失败,未找到相关联的仓库';        $apiRet['apiState'] = 'error';        $shopInfo = M('shops')->where(['shopId'=>$shopId,'shopFlag'=>1])->find();        $shopConfig = M('shop_configs')->where(['shopId'=>$shopInfo['shopId']])->find();        if($shopConfig['isMainWarehouse'] != 1){            $apiRet['apiInfo'] = '操作失败,请先开启总仓';            return $apiRet;        }        $houseInfo = M('warehouse','is_')->where(['number'=>$shopInfo['shopSn']])->find();        $userInfo = M('user','is_')->where(['id'=>$shopConfig['mainWarehouseUserId']])->find();        $houseInfo['userId'] = $userInfo['id']; //is_user表id        $houseInfo['username'] = $userInfo['name']; //is_user表id        $houseInfo['merchant'] = $userInfo['merchant']; //is_merchant表id        if(!$houseInfo){            return $apiRet;        }        return $houseInfo;    }    /*     * 获取云仓库的商品列表     * @param int warehouseId PS:仓库id,如果选择总仓请传 0     * */    public function getWareHouseGoods($warehouseId){        $where = " where 1=1 ";        $where .= " and warehouse='".$warehouseId."' ";        $sql = "select id,`name`,`number`,spec,unit,buy,sell,retail,imgs,details,warehouse,stocktip from is_goods ".$where;        $data = $this->pageQuery($sql);        foreach ($data['root'] as &$val){            $val['imgs'] = json_decode($val['imgs']);            foreach ($val['imgs'] as $vk=>$v){                $val[imgs][$vk] = C('JXC_WEB').$v;            }        }        return $data;    }    /*     * 本地同步云端的商品     * */    public function synchroGoods($param){        $apiRet['apiCode'] = -1;        $apiRet['apiInfo'] = '操作失败';        $apiRet['apiState'] = 'error';        $shopId = $param['shopId'];        $houseInfo = $this->checkShopWareHouse($shopId);        if(empty($houseInfo['id'])){            return $houseInfo;        }        if($param['warehouseType'] == 1){            $param['warehouseId'] = $houseInfo['id'];//云仓id        }else{            $param['warehouseId'] = 0;//仓库id(总仓)        }        $goodsTab = M('goods');        $gallerTab = M('goods_gallerys');        $isGoodsTab = M('goods','is_');        $isGWhere['warehouse'] = $param['warehouseId'];        if($param['type'] == 1){            $goodsId = json_decode($param['goodsId']);            $goodsSnArr = [];            foreach ($goodsId as $val){                $goodsSnArr[] = M('goods','is_')->where(['id'=>$val,'warehouse'=>$param['warehouseId']])->getField('number');            }            $isGWhere['number'] = ['IN',$goodsSnArr];        }        $isGoodsList = $isGoodsTab->where($isGWhere)->select();        if($isGoodsList){            foreach ($isGoodsList as $key=>$value){                $goodsInfo = $goodsTab->where(['goodsSn'=>$value['number'],'shopId'=>$shopId])->field('goodsId')->find();                $gallery = json_decode($value['imgs']);//相册                if(!$goodsInfo){                    if(empty($value['number'])){                        continue;                    }                    $jxcGoodsInsert = $value;                    $jxcGoodsInsert['warehouse'] = $houseInfo['id'];                    unset($jxcGoodsInsert['id']);                    $isGoodsTab->add($jxcGoodsInsert);//is_goods                    $insert = [];                    $insert['shopId'] = $shopId;                    $insert['goodsName'] = $value['name'];                    $insert['goodsSn'] = $value['number'];                    $insert['goodsFlag'] = 1;                    $insert['goodsStatus'] = 1;                    $insert['goodsDesc'] = $value['details'];                    $insert['spec'] = $value['spec'];                    $insert['isSale'] = 1;                    $insert['goodsStock'] = $value['stocktip'];                    $insert['saleTime'] = date('Y-m-d H:i:s',time());                    $goodsInfo['goodsId'] = $goodsTab->add($insert);//wst_goods                }else{                    //如果本地已经存在,则值更新个别字段                    $edit = [];                    $edit['goodsId'] = ['goodsId'];                    $edit['goodsName'] = $value['name'];                    $edit['spec'] = $value['spec'];                    $edit['marketPrice'] = $value['sell'];//销货价格                    $edit['shopPrice'] = $value['retail'];//零售价格                    $edit['goodsDesc'] = $value['details'];                    $edit['goodsStock'] = $value['stocktip']; //库存                    $editRes = M('goods')->where("goodsId='".$goodsInfo['goodsId']."'")->save($edit);                }                if($gallery){                    foreach ($gallery as $val){                        //info: C('JXC_WEB')."/skin/upload/goods/img/5d8830310576b.jpeg"                        $imgUrl = C('JXC_WEB').$val;                        $imgUrlInfo = pathinfo($imgUrl);                        $savePath = "Upload/goods/".date("Y-m",time());                        $defaultImgName = time().'_'.$imgUrlInfo['filename'];                        $savePathImg = $savePath.'/'.$defaultImgName.'.'.$imgUrlInfo['extension'];                        if (!is_dir($savePath)) {                            mkdir($savePath, 0777, true);                        }                        import("ORG.Net.Http");                        \Org\Net\Http::curlDownload($imgUrl,$savePathImg);                        $imgClass = new \Think\Image();                        $imgClass->open($savePathImg);                        if(!empty($imgClass->width($savePathImg))){                            $thumbImg = $savePath.'/'.$defaultImgName.'_thumb'.'.'.$imgUrlInfo['extension'];                            $imgClass->thumb(300, 300)->save($thumbImg);                            $gallerTab->where(['goodsId'=>$goodsInfo['goodsId']])->delete();                            $insertGallery['goodsId'] = $goodsInfo['goodsId'];                            $insertGallery['shopId'] = $shopId;                            $insertGallery['goodsImg'] = $savePathImg;                            $insertGallery['goodsThumbs'] = $thumbImg;                            $gallerTab->add($insertGallery);                        }                    }                }            }        }        $apiRet['apiCode'] = 0;        $apiRet['apiInfo'] = '操作成功';        $apiRet['apiState'] = 'success';        return $apiRet;    }    /*     * 获取店铺对应的仓库的信息     * */    public function getShopWareHouse($shopId,$shopSn){        $houseInfo = $this->checkShopWareHouse($shopId);        return $houseInfo;    }    /*     * 获取所有的仓库列表     * */    public function getAllWareHouse($shopId){        $apiRet['apiCode'] = -1;        $apiRet['apiInfo'] = '获取数据失败';        $apiRet['apiState'] = 'error';        $houseInfo = $this->checkShopWareHouse($shopId);        if(empty($houseInfo['id'])){            return $houseInfo;        }        $list = M('warehouse','is_')->order('id desc')->select();        if($list){            $apiRet['apiCode'] = 0;            $apiRet['apiInfo'] = '获取数据成功';            $apiRet['apiState'] = 'success';            $apiRet['apiData'] = $list;        }        return $apiRet;    }    /*     * 商户端生成采购单     * */    public function createPurchase($param){        $apiRet['apiCode'] = -1;        $apiRet['apiInfo'] = '操作失败';        $apiRet['apiState'] = 'error';        $houseInfo = $this->checkShopWareHouse($param['shopId']);        if(empty($houseInfo['id'])){            return $houseInfo;        }        $goods = json_decode($param['goods'],true);        $goodsTab = M('goods');        foreach ($goods as $key=>&$val){            $goodsInfo = $goodsTab->where(['goodsId'=>$val['goods']])->field('goodsSn,goodsName')->find();            $val['goodsSn'] = $goodsInfo['goodsSn'];            $val['goodsName'] = $goodsInfo['goodsName'];        }        unset($val);        $checkGoods = $this->checkWareHouseGoods($houseInfo['id'],$goods);        if($checkGoods['state'] !== true){            $apiRet['apiInfo'] = $checkGoods['errorMsgStr'];            return $apiRet;        }        $newGoods = $checkGoods['newGoods'];        M()->startTrans();//开启事物        //添加is_opurchaseclass信息        $opurchaseclass = [];        $opurchaseclass['merchant'] = $houseInfo['merchant'];        $opurchaseclass['time'] = time();        $opurchaseclass['number'] = $this->get_number('CGDD');        $opurchaseclass['user'] = $houseInfo['userId'];        $opurchaseclass['type'] = 0;        $opurchaseclass['auditinguser'] = $houseInfo['userId'];        $opurchaseclass['auditingtime'] = time();        $opurchaseclass['data'] = $param['remark'];        $opurchaseclass['storage'] = 0;        $opurchaseId = M('opurchaseclass','is_')->add($opurchaseclass);        if($opurchaseId){            //添加操作日志 start            $content = "新增采购订单[ ".$opurchaseclass['number']." ]"; //内容            $parameter['shopId'] = $param['shopId'];            $parameter['content'] = $content;            $parameter['opurchaseclassId'] = $opurchaseId;            $this->insertOpurchaseActionLog($parameter);            //添加操作日志 end            //添加is_opurchaseinfo信息            foreach ($newGoods as $val){                $opurchaseinfo = [];                $opurchaseinfo['pid'] = $opurchaseId;                $opurchaseinfo['goods'] = $val['goods'];                $opurchaseinfo['goodsSn'] = $val['goods'];                $opurchaseinfo['nums'] = $val['nums'];                $opurchaseinfo['readynums'] = 0;                $opurchaseinfo['data'] = $val['data'];                $opurchaseinfo['userId'] = $houseInfo['userId'];                $opurchaseinfo['username'] = $houseInfo['username'];                $opurchaseinfo['storage'] = 0;                $opurchaseinfo['goodsSn'] = $val['goodsSn'];                $opurchaseinfoId = M('opurchaseinfo','is_')->add($opurchaseinfo);            }            if($opurchaseinfoId){                M()->commit();                $apiRet['apiCode'] = 0;                $apiRet['apiInfo'] = '添加采购单成功';                $apiRet['apiState'] = 'success';                return $apiRet;            }else{                M()->rollback();                $apiRet['apiInfo'] = '添加采购单详细信息失败';                return $apiRet;            }        }else{            M()->rollback();            $apiRet['apiInfo'] = '添加采购单失败';            return $apiRet;        }    }    /*     * 验证云仓是否有相对应的商品     * @param int $wareHouseId PS:仓库id     * @param arr $goods PS:商品     * */    public function checkWareHouseGoods($wareHouseId,$goods){        $errorMsg = [];        $errorMsgStr = '';        $newGoods = [];        $isGoodsTab = M('goods','is_');        $state = true;        foreach ($goods as $key=>&$val){            $isGoodsInfo = $isGoodsTab->where(['number'=>$val['goodsSn'],'warehouse'=>$wareHouseId])->find();            if(!$isGoodsInfo){                $state = false;                $goodsError = [                    "goods"=>$val['goods'],                    "goodsName"=>$val['goodsName'],                ];                $errorMsg[] = $goodsError;                $errorMsgStr .= $val['goodsName']." | ";            }else{                $newGoodsInfo['goods'] = $isGoodsInfo['id'];                $newGoodsInfo['nums'] = $val['nums'];                $newGoodsInfo['data'] = $val['data'];                $newGoodsInfo['goodsSn'] = $isGoodsInfo['number'];                $newGoodsInfo['goodsName'] = $isGoodsInfo['name'];                $newGoods[] = $newGoodsInfo;            }        }        unset($val);        $data['state'] = $state;        $data['errorMsg'] = $goodsError;        $data['errorMsgStr'] = !empty($errorMsgStr)?trim($errorMsgStr," | ")." 云仓商品对应有误":"";        $data['newGoods'] = $newGoods;        return $data;    }    /*     * 商户端获取相关采购单     * @param int storage PS:入库状态[0:未入库|1:部分入库|2:已入库|3:未审核|4:已审核|20:全部]     * @param string startDate PS:开始时间 例子:2019-04-06 12:00:00     * @param string endDate PS:结束时间 例子:2019-10-06 20:00:00     * @param string number PS:单号     * */    public function getShopPurchase($param){        $apiRet['apiCode'] = -1;        $apiRet['apiInfo'] = '获取数据失败';        $apiRet['apiState'] = 'error';        $shopId = $param['shopId'];        $storage = $param['storage'];        $startDate = $param['startDate'];        $endDate = $param['endDate'];        $number = $param['number'];        $houseInfo = $this->checkShopWareHouse($shopId);        if(empty($houseInfo['id'])){            return $houseInfo;        }        $where = " where pur.merchant='".$houseInfo['merchant']."' ";        if($storage != 20){            if($storage == 3){                $where .= " and pur.type=0 ";            }elseif ($storage == 4){                $where .= " and pur.type=1 ";            }else{                $where .= " and pur.storage='".$storage."' ";            }        }        if(!empty($startDate) && !empty($endDate)){            $startDateInt = strtotime($startDate);            $endDateInt = strtotime($endDate);            $where .= " and pur.time >='".$startDateInt."' and pur.time <= '".$endDateInt."' ";        }        if(!empty($number)){            $where .= " and pur.number='".$number."' ";        }        $sql = "select pur.*,m.name,u.name as username from is_opurchaseclass pur left join is_merchant m on pur.merchant=m.id left join is_user u on u.id=pur.user ";        $sql .= $where;        $sql .= " order by pur.id desc ";        $data = $this->pageQuery($sql);        if($data['root']){            foreach ($data['root'] as $key=>&$val){                $val['time'] = date('Y-m-d',$val['time']);                $val['storageName'] = $this->getStorageName($val['storage']);//获取采购单的状态            }            unset($val);            $apiRet['apiCode'] = 0;            $apiRet['apiInfo'] = '操作成功';            $apiRet['apiState'] = 'success';            $apiRet['apiData'] = $data;        }        return $apiRet;    }    /*     * 商户端获取采购单详情     * */    public function getShopPurchaseInfo($param){        $apiRet['apiCode'] = -1;        $apiRet['apiInfo'] = '获取数据失败';        $apiRet['apiState'] = 'error';        $shopId = $param['shopId'];        $houseInfo = $this->checkShopWareHouse($shopId);        if(empty($houseInfo['id'])){            return $houseInfo;        }        $info = M('opurchaseclass pur','is_')            ->join("left join is_merchant m on m.id=pur.merchant")            ->join("left join is_user u on u.id=pur.user")            ->where(['pur.merchant'=>$houseInfo['merchant'],'pur.id'=>$param['purchaseId']])            ->field('pur.*,m.name,u.name as username')            ->find();        $info['storageName'] = $this->getStorageName($info['storage']);        if(!$info){            return $apiRet;        }        $info['opurchaseinfo'] = [];        $opurchaseinfo = M('opurchaseinfo info','is_')            ->join("left join is_goods g on g.id=info.goods")            ->where(['info.pid'=>$info['id']])            ->field("info.*,g.name as goodsName,g.number as goodsName,g.spec,g.buy,g.sell,g.imgs")            ->select();        foreach ($opurchaseinfo as $key=>&$val){            $val['storageName'] = $this->getStorageName($val['storage']);            $imgs = json_decode($val['imgs']);            foreach ($imgs as $k=>$v){                $imgs[$k] = C("JXC_WEB").$v;            }            $val['imgs'] = $imgs;        }        unset($val);        if($opurchaseinfo){            $info['opurchaseinfo'] = $opurchaseinfo;        }        $apiRet['apiCode'] = 0;        $apiRet['apiInfo'] = '获取数据成功';        $apiRet['apiState'] = 'success';        $apiRet['apiData'] = $info;        return $apiRet;    }    /*     * 获取采购单的状态     * @param int storage PS:(入库状态[0:未入库|1:部分入库|2:已入库])     * */    public function getStorageName($storage){        switch($storage) {            case 1:                $name = '部分入库';                break;            case 2:                $name = '已入库';                break;            default:                $name = '未入库';                break;        }        return $name;    }    /*     * 获取云仓储的商品 PS:(总仓和申请的分仓和本地仓都有的商品才会展示出来)     * 用于申请调拨单     * @param string token     * @param int warehouseId 仓库id     * 搜索     * @param string goodsName 商品名称     * @param string goodsSn 商品编号     * @param string code 条形码     * */    public function getRoomGoods($param){        $apiRet['apiCode'] = -1;        $apiRet['apiInfo'] = '获取数据失败';        $apiRet['apiState'] = 'error';        $shopId = $param['shopId'];        $houseInfo = $this->checkShopWareHouse($shopId);        if(empty($houseInfo['id'])){            return $houseInfo;        }        $goodsSn = M("goods")->where(["shopId"=>$shopId,"goodsFlag"=>1])->getField("goodsSn",true);        $goodsSnStr = 0;        $goodsSnStrTrue = 0;        if($goodsSn){            foreach ($goodsSn as $k=>&$v){                $v = "'".$v."'";            }            unset($v);            $goodsSnStr = implode(',',$goodsSn);            $warehouseGoods = M("goods","is_")->where("warehouse='".$param['warehouseId']."' and number IN($goodsSnStr)")->select();            if($warehouseGoods){                foreach ($warehouseGoods as $val){                    $wareGoodsId[] = $val['id'];                    $wareGoodsNumber[] = "'".$val['number']."'";                }                $goodsSnStrTrue = implode(",",$wareGoodsNumber);            }        }        $where = " where 1=1 and r.nums > 0 and g.number IN($goodsSnStrTrue) ";        $sql = "select r.*,w.name as warehouseName,g.id as goodsId,g.name,g.number,g.spec,g.class,g.brand,g.buy,g.sell,g.retail,g.code,g.imgs from is_room r     left join is_goods g on g.id=r.goods     left join is_warehouse w on w.id=r.warehouse     left join wst_goods wg on g.number=wg.goodsSn    ";        //where        if(!empty($param['goodsName'])){            $where .= " and g.name like '%".$param['goodsName']."%' ";        }        if(!empty($param['goodsSn'])){            $where .= " and g.number like '%".$param['goodsSn']."%' ";        }        if(!empty($param['code'])){            $where .= " and g.code ='".$param['code']."' ";        }        if(!is_null($param['warehouseId']) && $param['warehouseId'] >= 0){            $where .= " and g.warehouse ='".$param['warehouseId']."' ";        }        $sql .= $where;        $sql .= " group by r.goods order by r.id desc ";        $data = $this->pageQuery($sql);        //var_dump($this->getLastSql());exit;        foreach ($data['root'] as $key=>&$val){            $val['roomId'] = $val['id'];            $imgs = json_decode($val['imgs']);            foreach ($imgs as $k=>$v){                $imgs[$k] = C("JXC_WEB").$v;            }            $val['imgs'] = $imgs;        }        unset($val);        if($data['root']){            $apiRet['apiCode'] = 0;            $apiRet['apiInfo'] = '获取数据成功';            $apiRet['apiState'] = 'success';            $apiRet['apiData'] = $data;        }        return $apiRet;    }    /*     * 获取调拨仓库     * */    public function getAllRoomHouse($shopId,$param){        $apiRet['apiCode'] = -1;        $apiRet['apiInfo'] = '获取数据失败';        $apiRet['apiState'] = 'error';        $houseInfo = $this->checkShopWareHouse($shopId);        if(empty($houseInfo['id'])){            return $houseInfo;        }        $where = " where 1=1 ";        if(!empty($param['name'])){            $where .= " and w.name like '%".$param['name']."%'";        }        /*$list = M('room r','is_')            ->join("left join is_warehouse w on w.id=r.warehouse")            ->field("r.*,w.name")            ->where($where)            ->limit(($param['page']-1)*$param['pageSize'],$param['pageSize'])            ->group("r.warehouse")            ->order('r.id desc')            ->select();*/        $sql = "select r.*,w.name from is_room r  left join is_warehouse w on w.id=r.warehouse $where group by r.warehouse order by r.id desc ";        $list = $this->pageQuery($sql);        if($list){            $apiRet['apiCode'] = 0;            $apiRet['apiInfo'] = '获取数据成功';            $apiRet['apiState'] = 'success';            $apiRet['apiData'] = $list;        }        return $apiRet;    }    /*     * 商户端生成调拨单     * */    public function createOtpurchase($param){        $apiRet['apiCode'] = -1;        $apiRet['apiInfo'] = '操作失败';        $apiRet['apiState'] = 'error';        $houseInfo = $this->checkShopWareHouse($param['shopId']);        if(empty($houseInfo['id'])){            return $houseInfo;        }        $goods = json_decode($param['goods'],true);        $isGoodsTab = M('goods','is_');        foreach ($goods as $key=>&$val){            $isGoodsInfo = $isGoodsTab->where(['id'=>$val['goods']])->find();            $myGoodsInfo = $isGoodsTab->where(['number'=>$isGoodsInfo['number'],"warehouse"=>$houseInfo['id']])->find();            $toRoomInfo = M('room','is_')->where(['warehouse'=>$houseInfo['id'],'goods'=>$myGoodsInfo['id']])->find();            $val['toroomId'] = $toRoomInfo['id'];            $val['goodsSn'] = $isGoodsInfo['number'];            if($val['towarehouseId'] == $houseInfo['id']){                $apiRet['apiInfo'] = '操作失败,所属仓库和调拨仓库不能相同';                return $apiRet;            }        }        unset($val);        M()->startTrans();//开启事物        //添加is_allocationclass信息        $allocationclass = [];        $allocationclass['merchant'] = $houseInfo['merchant'];        $allocationclass['time'] = time();        $allocationclass['number'] = $this->get_number('DBD');        $allocationclass['user'] = $houseInfo['userId'];        $allocationclass['file'] = '';        $allocationclass['data'] = $param['remark'];        $allocationclass['type'] = 0;        $allocationclass['auditinguser'] = $houseInfo['userId'];        $allocationclass['auditingtime'] = time();        $allocationclassId = M('allocationclass','is_')->add($allocationclass);        if($allocationclassId){            //添加操作日志 start            $content = "新增调拨单[ ".$allocationclass['number']." ]"; //内容            $parameter['shopId'] = $param['shopId'];            $parameter['content'] = $content;            $parameter['opurchaseclassId'] = $allocationclassId;            $this->insertOpurchaseActionLog($parameter,0,2);            //添加操作日志 end            //添加allocationinfo信息            foreach ($goods as $val){                $allocationinfo = [];                $allocationinfo['pid'] = $allocationclassId;                $allocationinfo['room'] = $val['roomId'];                $allocationinfo['goods'] = $val['goods'];                $allocationinfo['goodsSn'] = $val['number'];                $allocationinfo['warehouse'] = $val['towarehouseId'];                $allocationinfo['serial'] = '';                $allocationinfo['nums'] = $val['nums'];                $allocationinfo['towarehouse'] = $houseInfo['id'];                $allocationinfo['toroom'] = $val['toroomId'];                $allocationinfo['data'] = $val['data'];                $opurchaseinfoId = M('allocationinfo','is_')->add($allocationinfo);            }            if($opurchaseinfoId){                M()->commit();                $apiRet['apiCode'] = 0;                $apiRet['apiInfo'] = '添加调拨单成功';                $apiRet['apiState'] = 'success';                return $apiRet;            }else{                M()->rollback();                $apiRet['apiInfo'] = '添加调拨单详细信息失败';                return $apiRet;            }        }else{            M()->rollback();            $apiRet['apiInfo'] = '添加调拨单失败';            return $apiRet;        }    }    /*     * 商户端获取相关调拨单(自己)     * @param string token     * @param int type PS:审核状态[0:等待确认|1:已确认|2:已拒绝|3:未审核|4:已审核|5:完成|20:全部]     * @param string startDate PS:开始时间     * @param string endDate PS:结束时间     * @param string number PS:单号     * */    public function getShopOtpurchase($param){        $apiRet['apiCode'] = -1;        $apiRet['apiInfo'] = '获取数据失败';        $apiRet['apiState'] = 'error';        $shopId = $param['shopId'];        $type = $param['type'];        $startDate = $param['startDate'];        $endDate = $param['endDate'];        $number = $param['number'];        $houseInfo = $this->checkShopWareHouse($shopId);        if(empty($houseInfo['id'])){            return $houseInfo;        }        $where = " where al.merchant='".$houseInfo['merchant']."' ";        if($type != 20){            $where .= " and al.type='".$type."' ";        }        if(!empty($startDate) && !empty($endDate)){            $startDateInt = strtotime($startDate);            $endDateInt = strtotime($endDate);            $where .= " and al.time >= '".$startDateInt."' and al.time <= '".$endDateInt."' ";        }        if(!empty($number)){            $where .= " and al.number='".$number."' ";        }        $sql = "select al.*,m.name,u.name as username from is_allocationclass al left join is_merchant m on al.merchant=m.id left join is_user u on u.id=al.user ";        $sql .= $where;        $sql .= " order by al.id desc ";        $data = $this->pageQuery($sql);        if($data['root']){            foreach ($data['root'] as $key=>&$val){                $val['time'] = date('Y-m-d',$val['time']);                $val['typeName'] = $this->getAllicationTypeName($val['type']);            }            unset($val);            $apiRet['apiCode'] = 0;            $apiRet['apiInfo'] = '操作成功';            $apiRet['apiState'] = 'success';            $apiRet['apiData'] = $data;        }        return $apiRet;    }    /*     * 商户端获取相关调拨单(被申请调拨)     * @param string token     * @param int type PS:审核状态[0:等待确认|1:已确认|2:已拒绝|3:未审核|4:已审核|5:完成|20:全部]     * @param string startDate PS:开始时间     * @param string endDate PS:结束时间     * @param string number PS:单号     * */    public function getShopOtpurchaseTo($param){        $apiRet['apiCode'] = -1;        $apiRet['apiInfo'] = '获取数据失败';        $apiRet['apiState'] = 'error';        $shopId = $param['shopId'];        $type = $param['type'];        $startDate = $param['startDate'];        $endDate = $param['endDate'];        $number = $param['number'];        $houseInfo = $this->checkShopWareHouse($shopId);        if(empty($houseInfo['id'])){            return $houseInfo;        }        $where = " where alin.warehouse='".$houseInfo['id']."' ";        if($type != 20){            $where .= " and al.type='".$type."' ";        }        if(!empty($startDate) && !empty($endDate)){            $startDateInt = strtotime($startDate);            $endDateInt = strtotime($endDate);            $where .= " and al.time >= '".$startDateInt."' and al.time <= '".$endDateInt."' ";        }        if(!empty($number)){            $where .= " and al.number='".$number."' ";        }        $sql = "select al.*,m.name,u.name as username,s.shopName from is_allocationclass al     left join is_merchant m on al.merchant=m.id      left join is_user u on u.id=al.user      left join is_allocationinfo alin on alin.pid=al.id     left join is_warehouse wh on wh.id=alin.warehouse      left join wst_shops s on s.shopSn=wh.number      ";        $sql .= $where;        $sql .= " order by al.id desc ";        $data = $this->pageQuery($sql);        if($data['root']){            foreach ($data['root'] as $key=>&$val){                $val['time'] = date('Y-m-d',$val['time']);                $val['typeName'] = $this->getAllicationTypeName($val['type']);            }            unset($val);            $apiRet['apiCode'] = 0;            $apiRet['apiInfo'] = '操作成功';            $apiRet['apiState'] = 'success';            $apiRet['apiData'] = $data;        }        return $apiRet;    }    /*     * 商户端获取相关调拨单详情(被申请调拨)     * */    public function getShopOtpurchaseInfoTo($param){        $apiRet['apiCode'] = -1;        $apiRet['apiInfo'] = '获取数据失败';        $apiRet['apiState'] = 'error';        $shopId = $param['shopId'];        $houseInfo = $this->checkShopWareHouse($shopId);        if(empty($houseInfo['id'])){            return $houseInfo;        }        $info = M('allocationclass al','is_')            ->join("left join is_merchant m on m.id=al.merchant")            ->join("left join is_user u on u.id=al.user")            ->join("left join is_allocationinfo alin on alin.pid=al.id")            ->where(['alin.warehouse'=>$houseInfo['id'],'al.id'=>$param['allocationclassId']])            ->field('al.*,m.name,u.name as username')            ->find();        $info['storageName'] = $this->getAllicationTypeName($info['type']);        $info['timeDate'] = date("Y-m-d",$info['time']);        if(!$info){            return $apiRet;        }        $info['allocationinfo'] = [];        $allocationinfo = M('allocationinfo info','is_')            ->join("left join is_goods g on g.id=info.goods")            ->where(['info.pid'=>$info['id'],'info.warehouse'=>$houseInfo['id']])            ->select();        foreach ($allocationinfo as $key=>&$val){            $val['room'] = M('room r','is_') //所属仓储            ->join("left join is_warehouse w on w.id=r.warehouse")                ->where("r.id='".$val['room']."'")                ->find();            $val['toroom'] = M('room r','is_') //调拨仓储            ->join("left join is_warehouse w on w.id=r.warehouse")                ->where("r.id='".$val['toroom']."'")                ->find();            $imgs = json_decode($val['imgs']);            foreach ($imgs as $k=>$v){                $imgs[$k] = C("JXC_WEB").$v;            }            $val['imgs'] = $imgs;        }        unset($val);        if($allocationinfo){            $info['allocationinfo'] = $allocationinfo;        }        $apiRet['apiCode'] = 0;        $apiRet['apiInfo'] = '获取数据成功';        $apiRet['apiState'] = 'success';        $apiRet['apiData'] = $info;        return $apiRet;    }    /*     * 获取is_allocationclass表中的type值     * */    public function getAllicationTypeName($type){        switch($type)        {            case 1:                $name = "已确认";                break;            case 2:                $name = "已拒绝";                break;            case 3:                $name = "未审核";                break;            case 4:                $name = "已审核";                break;            case 5:                $name = "已完成";                break;            default:                $name = "等待确认";                break;        }        return $name;    }    /*     * 商户端获取相关调拨单详情     * */    public function getShopOtpurchaseInfo($param){        $apiRet['apiCode'] = -1;        $apiRet['apiInfo'] = '获取数据失败';        $apiRet['apiState'] = 'error';        $shopId = $param['shopId'];        $houseInfo = $this->checkShopWareHouse($shopId);        if(empty($houseInfo['id'])){            return $houseInfo;        }        $info = M('allocationclass al','is_')            ->join("left join is_merchant m on m.id=al.merchant")            ->join("left join is_user u on u.id=al.user")            ->where(['al.merchant'=>$houseInfo['merchant'],'al.id'=>$param['allocationclassId']])            ->field('al.*,m.name,u.name as username')            ->find();        $info['storageName'] = $this->getAllicationTypeName($info['type']);        $info['timeDate'] = date("Y-m-d",$info['time']);        if(!$info){            return $apiRet;        }        $info['allocationinfo'] = [];        $allocationinfo = M('allocationinfo info','is_')            ->join("left join is_goods g on g.id=info.goods")            ->where(['info.pid'=>$info['id']])            ->select();        foreach ($allocationinfo as $key=>&$val){            $val['room'] = M('room r','is_') //所属仓储            ->join("left join is_warehouse w on w.id=r.warehouse")                ->where("r.id='".$val['room']."'")                ->find();            $val['toroom'] = M('room r','is_') //调拨仓储            ->join("left join is_warehouse w on w.id=r.warehouse")                ->where("r.id='".$val['toroom']."'")                ->find();            $imgs = json_decode($val['imgs']);            foreach ($imgs as $k=>$v){                $imgs[$k] = C("JXC_WEB").$v;            }            $val['imgs'] = $imgs;        }        unset($val);        if($allocationinfo){            $info['allocationinfo'] = $allocationinfo;        }        $apiRet['apiCode'] = 0;        $apiRet['apiInfo'] = '获取数据成功';        $apiRet['apiState'] = 'success';        $apiRet['apiData'] = $info;        return $apiRet;    }    /*     * 获取商城分类信息     * @param int catId PS:商城分类id     * */    public function getGoodsCatInfo($catId){        if((int)$catId <= 0){            return false;        }        $returnData = [];        $goodsCatInfo = M('goods_cats')->where(['catId'=>$catId,'catFlag'=>1])->find();        if($goodsCatInfo){            $returnData = $goodsCatInfo;        }        return $returnData;    }    /*     * 获取进销存分类信息     * @param int catName PS:分类名称     * */    public function getERPCatInfoByName($catname,$pid=0){        if(empty($catname)){            return false;        }        $returnData = [];        $goodsCatInfo = M('goodsclass','is_')->where(['name'=>$catname,'pid'=>$pid])->find();        if($goodsCatInfo){            $returnData = $goodsCatInfo;        }        return $returnData;    }    /*     * 云仓添加商品(商户后台添加商品时调用)     * @param int shopId PS:商品id     * @param arr $goods PS:商品信息     * */    public function addCloudWarehouseGoods($shopId,$goods){        $apiRet['apiCode'] = -1;        $apiRet['apiInfo'] = '添加失败';        $apiRet['apiState'] = 'error';        $houseInfo = $this->checkShopWareHouse($shopId);        if(empty($houseInfo['id'])){            return $houseInfo;        }        //加个分类,最多三级        $goodsCatInfo1 = $this->getGoodsCatInfo($goods['goodsCatId1']);        $goodsCatInfo2 = $this->getGoodsCatInfo($goods['goodsCatId2']);        $goodsCatInfo3 = $this->getGoodsCatInfo($goods['goodsCatId3']);        $erpGoodsCat1 = $this->getERPCatInfoByName($goodsCatInfo1['catName']);        $erpGoodsCat2 = $this->getERPCatInfoByName($goodsCatInfo2['catName'],$erpGoodsCat1['id']);        $erpGoodsCat3 = $this->getERPCatInfoByName($goodsCatInfo3['catName'],$erpGoodsCat2['id']);        $erpGoodsCatId = 0;        $erpGoodsCatId1 = $erpGoodsCat1['id'];        if(!$erpGoodsCat1){            $catData['pid'] = 0;            $catData['name'] = $goodsCatInfo1['catName'];            $erpGoodsCatId1 = M('goodsclass','is_')->add($catData);        }        $erpGoodsCatId2 = $erpGoodsCat2['id'];        if(!$erpGoodsCat2){            $catData['pid'] = $erpGoodsCatId1;            $catData['name'] = $goodsCatInfo2['catName'];            $erpGoodsCatId2 = M('goodsclass','is_')->add($catData);        }        $erpGoodsCatId3 = $erpGoodsCat3['id'];        if(!$erpGoodsCat3){            $catData['pid'] = $erpGoodsCatId2;            $catData['name'] = $goodsCatInfo3['catName'];            $erpGoodsCatId3 = M('goodsclass','is_')->add($catData);        }        if($erpGoodsCatId1){            $erpGoodsCatId = $erpGoodsCatId1;        }        if($erpGoodsCatId2){            $erpGoodsCatId = $erpGoodsCatId2;        }        if($erpGoodsCatId3){            $erpGoodsCatId = $erpGoodsCatId3;        }        $insert['name'] = $goods['goodsName'];        $insert['number'] = $goods['goodsSn'];        $insert['spec'] = $goods['spec'];        $insert['class'] = $erpGoodsCatId;        $insert['brand'] = '';        $insert['unit'] = '';        $insert['buy'] = $goods['marketPrice'];        $insert['sell'] = $goods['shopPrice'];        $insert['stocktip'] = $goods['goodsStock'];        $insert['warehouse'] = $houseInfo['id'];        $goodsTab = M('goods','is_');        $goodsInfo = $goodsTab->where(['number'=>$insert['number'],'warehouse'=>$insert['warehouse']])->find();        if($goodsInfo){            $goodsId = $goodsInfo['id'];            $goodsTab->where(['id'=>$goodsInfo['id']])->save($insert);        }else{            $goodsId = $goodsTab->add($insert);        }        if($goodsId){            //后加,与jxc系统统一            //is_otpurchaseclass            $otpurchaseclass["merchant"] = $houseInfo['merchant'];            $otpurchaseclass["time"] = time();            $otpurchaseclass["number"] = $this->get_number("QTRKD");            $otpurchaseclass["pagetype"] = 0;            $otpurchaseclass["user"] = $houseInfo["userId"];            $otpurchaseclass["file"] = "";            $otpurchaseclass["data"] = "商户端商品添加或编辑,涉及库存变动";            $otpurchaseclass["type"] = 1;            $otpurchaseclass["auditinguser"] = $houseInfo["userId"];            $otpurchaseclass["auditingtime"] = time();            $otpurchaseclass["more"] = "";            $otpurchaseclassId = M("otpurchaseclass","is_")->add($otpurchaseclass);            if($otpurchaseclassId){                //is_room                $roomWhere["warehouse"] = $houseInfo['id'];                $roomWhere["goods"] = $goodsId;                $roomInfo = M("room","is_")->where($roomWhere)->find();                if(!$roomInfo){                    $insert = [];                    $insert["warehouse"] = $houseInfo['id'];                    $insert["goods"] = $goodsId;                    $insert["nums"] = $goods['goodsStock'];                    $roomId = M("room","is_")->add($insert);                }else{                    $roomId = $roomInfo['id'];                }                if($roomId){                    //is_otpurchaseinfo                    $otpurchaseinfo["pid"] = $otpurchaseclassId;                    $otpurchaseinfo["goods"] = $goodsId;                    $otpurchaseinfo["attr"] = '';                    $otpurchaseinfo["warehouse"] = $houseInfo["id"];                    $otpurchaseinfo["nums"] = $goods['goodsStock'];                    $otpurchaseinfo["data"] = "商户端商品添加或编辑,涉及库存变动";                    $otpurchaseinfo["room"] = $roomId;                    $infoId = M("otpurchaseinfo","is_")->add($otpurchaseinfo);                    //is_roominfo                    $roomInfo = [];                    $roomInfo["pid"] = $roomId;                    $roomInfo["type"] = 7;                    $roomInfo["class"] = 0;                    $roomInfo["info"] = !empty($infoId)?$infoId:0;                    $roomInfo["nums"] = $otpurchaseinfo["nums"];                    M("roominfo","is_")->add($roomInfo);                }            }            $apiRet['apiCode'] = 0;            $apiRet['apiInfo'] = '添加成功';            $apiRet['apiState'] = 'success';        }        return $apiRet;    }    /*     * 云仓删除商品(商户后台删除商品时调用)     * @param int shopId PS:商品id     * @param string $goodsIds PS:商品id     * */    public function delCloudWarehouseGoods($shopId,$goodsIds){        $apiRet['apiCode'] = -1;        $apiRet['apiInfo'] = '操作失败';        $apiRet['apiState'] = 'error';        $houseInfo = $this->checkShopWareHouse($shopId);        if(empty($houseInfo['id'])){            return $houseInfo;        }        if(empty($goodsIds)){            $goodsIds = 0;        }        $goods = M('goods')->where(['goodsId'=>['IN',$goodsIds]])->field('goodsSn')->select();        $number = [];        foreach ($goods as $val){            $number[] = $val['goodsSn'];        }        $delWhere['number'] = ["IN",$number];        $delWhere['warehouse'] = $houseInfo['id'];        $delGoods = M('goods','is_')->where($delWhere)->delete();        if($delGoods){            $apiRet['apiCode'] = 0;            $apiRet['apiInfo'] = '操作成功';            $apiRet['apiState'] = 'success';        }        return $apiRet;    }    /*     * 商户端更改调拨单的状态 PS:(被申请调拨)     * * @storage int allocationclassId PS:调拨单id     * @storage int type 状态 PS:[1:已确认|2:已拒绝]     * @storage string desc 拒绝原因     * */    public function updateShopOtpurTypeTo($param){        $apiRet['apiCode'] = -1;        $apiRet['apiInfo'] = '操作失败';        $apiRet['apiState'] = 'error';        if(!in_array($param['type'],[1,2])){            $apiRet['apiInfo'] = '状态异常';            return $apiRet;        }        $houseInfo = $this->checkShopWareHouse($param['shopId']);        if(empty($houseInfo['id'])){            return $houseInfo;        }        $tab = M("allocationclass","is_");        $edit['type'] = $param['type'];        if(!empty($param['desc'])){            $edit['desc'] = $param['desc'];        }        $updateRes = $tab->where(["id"=>$param['allocationclassId']])->save($edit);        if($updateRes !== false){            //添加操作日志 start            $info = $tab->where(["id"=>$param['allocationclassId']])->find();            if($param['type'] == 1){                $typeName = "已确认";                //同意调拨减库存                $allocationinfos = M("allocationinfo","is_")->where(['pid'=>$param['allocationclassId']])->select();                foreach ($allocationinfos as $val){                    $nums = (int)$val['nums'];                    $is_goodsInfo = M("goods",'is_')->where(['id'=>$val['goods']])->find();                    $goodsWhere["goodsFlag"] = 1;                    $goodsWhere["goodsSn"] = $is_goodsInfo['number'];                    $goodsWhere["shopId"] = $param['shopId'];                    $goodsInfo = M("goods")->where($goodsWhere)->field('goodsId,goodsSn')->find();                    $sql = "update __PREFIX__goods set goodsStock=goodsStock-$nums where goodsId='".$goodsInfo['goodsId']."' ";                    $editRes = $this->execute($sql);                    if($editRes !== false){                        //updateJXCGoodsStock($goodsInfo['goodsId'],$nums,$type=1);                    }                }            }else{                $typeName = "已拒绝";            }            $content = "更改调拨单[ ".$info['number']." ]状态,".$typeName; //内容            $parameter['shopId'] = $param['shopId'];            $parameter['content'] = $content;            $parameter['opurchaseclassId'] = $param['allocationclassId'];            $this->insertOpurchaseActionLog($parameter,0,2);            //添加操作日志 end            $apiRet['apiCode'] = 0;            $apiRet['apiInfo'] = '操作成功';            $apiRet['apiState'] = 'success';        }        return $apiRet;    }    /**     * 商品列表(采购专用) PS:本地和云仓共有的     */    public function getPurchaseGoods($param =array()){        $apiRet['status'] = -1; //PS:返回字段不统一是兼容前端已有的数据格式        $apiRet['msg'] = '获取数据失败';        $apiRet['data'] = [];        $shopId = $param['shopId'];        $houseInfo = $this->checkShopWareHouse($shopId);        if(empty($houseInfo['id'])){            $apiRet['msg'] = $houseInfo['apiInfo'];            return $apiRet;        }        $shopCatId1 = (int)$param['shopCatId1'];        $shopCatId2 = (int)$param['shopCatId2'];        $goodsName = WSTAddslashes(I('goodsName'));        $sql = "select g.goodsId,g.shopId,g.SuppPriceDiff,g.goodsSn,g.shopGoodsSort,g.goodsName,g.goodsImg,g.goodsThums,g.shopPrice,g.goodsStock,g.saleCount,g.isSale,g.isRecomm,g.isHot,g.isBest,g.isNew,g.saleTime,g.createTime from __PREFIX__goods g left join is_goods is_g on is_g.number=g.goodsSn where g.goodsFlag=1 and g.shopId='".$shopId."' and is_g.warehouse='".$houseInfo['id']."'";        if($shopCatId1>0)$sql.=" and g.shopCatId1=".$shopCatId1;        if($shopCatId2>0)$sql.=" and g.shopCatId2=".$shopCatId2;        //二开        if(isset($paramete['goodsStatus']))$sql.=" and g.goodsStatus=".$param['goodsStatus'];        if(isset($paramete['isSale']))$sql.=" and g.isSale=".$param['isSale'];        if(isset($paramete['SuppPriceDiff']))$sql.=" and g.SuppPriceDiff=".$param['SuppPriceDiff'];        //END        if($goodsName!='')$sql.=" and (g.goodsName like '%".$goodsName."%' or g.goodsSn like '%".$goodsName."%') ";        if(!empty($paramete['goodsAttr']) && in_array($paramete['goodsAttr'],array('isAdminRecom','isAdminBest','isNew','isHot','isMembershipExclusive','isShopSecKill','isAdminShopSecKill','isAdminShopPreSale','isShopPreSale')))$sql.=" and g.".$paramete['goodsAttr']." = 1 ";        $sql.=" order by g.shopGoodsSort desc";        $list = $this->pageQuery($sql);        if(count($list['root']) > 0){            $apiRet['status'] = 0;            $apiRet['msg'] = '获取数据成功';        }        $apiRet['data'] = $list;        return $apiRet;    }    /**     * 添加采购单操作日志 wst_opurchase_action_log     * @param int $type PS:类型(0:niaocms商户|1:进销存商户)     * @param int $dataType PS:数据类型(1:采购单|2:调拨单)     */    public function insertOpurchaseActionLog($parameter,$type=0,$dataType=1){        $apiRet['apiCode'] = -1;        $apiRet['apiInfo'] = '操作失败';        $apiRet['apiState'] = 'error';        $shopId = $parameter['shopId'];        if($shopId){            $config['shopId'] = $shopId;            $config['isMainWarehouse'] = 1;            $shopConfig = M('shop_configs')->where($config)->field('mainWarehouseUsername,mainWarehouseUserId')->find();            if(!$shopConfig){                return $apiRet;            }            $isUserInfo = M('user','is_')->where(['id'=>$shopConfig['mainWarehouseUserId']])->find();            if(!$isUserInfo){                $apiRet['apiInfo'] = '总仓用户信息有误';                return $apiRet;            }            $log['opurchaseclassId'] = $parameter['opurchaseclassId'];            $log['shopId'] = $shopId;            $log['merchantId'] = $isUserInfo['merchant'];            $log['type'] = $type;            $log['dataType'] = $dataType;            $log['content'] = $parameter['content'];            $log['addTime'] = date("Y-m-d H:i:s",time());            $insertLogId = M('opurchase_action_log')->add($log);            if($insertLogId){                $apiRet['apiCode'] = 0;                $apiRet['apiInfo'] = '操作成功';                $apiRet['apiState'] = 'success';            }        }        return $apiRet;    }    /*     * 获取采购单的操作日志     * */    public function getPurchaseActionLog($param){        $apiRet['apiCode'] = -1;        $apiRet['apiInfo'] = '获取数据失败';        $apiRet['apiState'] = 'error';        $houseInfo = $this->checkShopWareHouse($param['shopId']);        if(empty($houseInfo['id'])){            return $houseInfo;        }        $where['opurchaseclassId'] = $param['opurchaseclassId'];        $where['dataType'] = 1;        $logList = M('opurchase_action_log')->where($where)->select();        if($logList){            $apiRet['apiCode'] = 0;            $apiRet['apiInfo'] = '获取数据成功';            $apiRet['apiState'] = 'success';            $apiRet['apiData'] = $logList;        }        return $apiRet;    }    /*     * 商户端更改调拨单的状态 PS:(申请调拨)     * @storage int allocationclassId PS:调拨单id     * @storage int type 状态(可扩展) PS:[5:已完成]     * */    public function updateShopOtpurType($param){        $apiRet['apiCode'] = -1;        $apiRet['apiInfo'] = '操作失败';        $apiRet['apiState'] = 'error';        $houseInfo = $this->checkShopWareHouse($param['shopId']);        if(empty($houseInfo['id'])){            return $houseInfo;        }        $tab = M("allocationclass","is_");        $edit['type'] = $param['type'];        $updateRes = $tab->where(["id"=>$param['allocationclassId']])->save($edit);        if($updateRes !== false){            //完成调拨加库存            //后台更改需求把调拨单加到入库任务中,所以这边的更改库存就先注释掉            /*$allocationinfos = M("allocationinfo","is_")->where(['pid'=>$param['allocationclassId']])->select();            foreach ($allocationinfos as $val){                $nums = (int)$val['nums'];                $is_goodsInfo = M("goods",'is_')->where(['id'=>$val['goods']])->find();                $goodsWhere["goodsFlag"] = 1;                $goodsWhere["goodsSn"] = $is_goodsInfo['number'];                $goodsWhere["shopId"] = $param['shopId'];                $goodsInfo = M("goods")->where($goodsWhere)->field('goodsId,goodsSn')->find();                $sql = "update __PREFIX__goods set goodsStock=goodsStock+$nums where goodsId='".$goodsInfo['goodsId']."' ";                $editRes = $this->execute($sql);                if($editRes !== false){                    updateJXCGoodsStock($goodsInfo['goodsId'],$nums,$type=0);                }            }*/            //添加操作日志 start            $info = $tab->where(["id"=>$param['allocationclassId']])->find();            $content = "更改调拨单[ ".$info['number']." ]状态,已完成"; //内容            $parameter['shopId'] = $param['shopId'];            $parameter['content'] = $content;            $parameter['opurchaseclassId'] = $param['allocationclassId'];            $this->insertOpurchaseActionLog($parameter,0,2);            //添加操作日志 end            $apiRet['apiCode'] = 0;            $apiRet['apiInfo'] = '操作成功';            $apiRet['apiState'] = 'success';        }        return $apiRet;    }    /*     * 获取调拨单的操作日志     * */    public function getAllocationclassLog($param){        $apiRet['apiCode'] = -1;        $apiRet['apiInfo'] = '获取数据失败';        $apiRet['apiState'] = 'error';        $houseInfo = $this->checkShopWareHouse($param['shopId']);        if(empty($houseInfo['id'])){            return $houseInfo;        }        $where['opurchaseclassId'] = $param['allocationclassId'];        $where['dataType'] = 2;        $logList = M('opurchase_action_log')->where($where)->select();        if($logList){            $apiRet['apiCode'] = 0;            $apiRet['apiInfo'] = '获取数据成功';            $apiRet['apiState'] = 'success';            $apiRet['apiData'] = $logList;        }        return $apiRet;    }    /*     * 统计调拨单各个状态下的数量     * @param string token     * @param string status 状态:[0:等待确认|1:已确认|2:已拒绝|3:未审核|4:已审核|5:完成],多个用英文逗号分隔,例如: 0,1,2,3     * */    public function getAllocationclassCount($param){        $apiRet['apiCode'] = 0;        $apiRet['apiInfo'] = '获取数据成功';        $apiRet['apiState'] = 'success';        $houseInfo = $this->checkShopWareHouse($param['shopId']);        if(empty($houseInfo['id'])){            return $houseInfo;        }        $status = trim($param['status'],",");        if(empty($status)){            $status = 0;        }        $where = [];        $where['merchant'] = $houseInfo['merchant'];        $where['type'] = ["IN",$status];        $data = M('allocationclass','is_')->where($where)->count();        if(!is_null($data)){            $apiRet['apiData'] = $data;        }        return $apiRet;    }}?>